(ns coldnew.compiler.brainfuck.backend.c
  (:require [clojure.pprint :refer [cl-format]]
            [clojure.string :as str]
            [coldnew.compiler.brainfuck.utils :refer [line-indent]]))

(declare generate-runtime ir->code)

(defn ir->c
  ([ir] (ir->c ir 3000))
  ([ir num-cells]
   (generate-runtime num-cells (apply str (map ir->code ir)))))

(defn generate-runtime
  [num-cells body]
  (cl-format nil "// This file is generated by coldnew's brainfuck compiler
// You can use following command to compile it:
//
//    gcc xxx.c -o xxx
//

#include <stdio.h>

int main(int argc, char *argv[])
{
\t// num-cells
\tchar cells[~d] = {0};
\tchar *ptr = cells;

\t// body
~d

\treturn 0;
}
" num-cells body))


(defmulti ir->code (fn [ir] (:op ir)))

(defmethod ir->code :default
  [ir]
  (throw (ex-info "Unknown IR found " {:ir ir})))

;;;; Basic IR

(defmethod ir->code :add
  [ir]
  (line-indent ir "++*ptr;"))

(defmethod ir->code :sub
  [ir]
  (line-indent ir "--*ptr;"))

(defmethod ir->code :right
  [ir]
  (line-indent ir "++ptr;"))

(defmethod ir->code :left
  [ir]
  (line-indent ir "--ptr;"))

(defmethod ir->code :output
  [ir]
  (line-indent ir "putchar(*ptr);"))

(defmethod ir->code :input
  [ir]
  (line-indent "*ptr = getchar();"))

(defmethod ir->code :loop
  [ir]
  (str (line-indent ir "while (*ptr) {")
       (str/join "" (map ir->code (:children ir)))
       (line-indent ir "}")))

;;;; Extended IR (for optimize)

(defmethod ir->code :set-cell-value
  [ir]
  (line-indent ir "*ptr += " (:val ir) ";"))

(defmethod ir->code :set-cell-pointer
  [ir]
  (line-indent ir "ptr += " (:val ir) ";"))

(defmethod ir->code :clear
  [ir]
  (line-indent ir "*ptr = 0;"))
