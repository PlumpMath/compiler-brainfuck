(ns coldnew.compiler.brainfuck.backend.java
  (:require #?(:clj  [clojure.pprint :refer [cl-format]]
               :cljs [cljs.pprint :refer [cl-format]])
            [clojure.string :as str]))

(declare generate-runtime ir->code)

(defn ir->java
  ([ir] (ir->java ir 3000))
  ([ir num-cells]
   (generate-runtime num-cells (apply str (map ir->code ir)))))

(defn generate-runtime
  [num-cells body]
  (cl-format nil "// This file is generated by coldnew's brainfuck compiler
// You can use following command to compile it:
//
//    javac  BrainFuck.java
//
// Then lt's execute it:
//
//    java BrainFuck
//

import java.util.Scanner;

public class BrainFuck {

\tprivate static int ptr;
\tprivate static byte[] cells = new byte[~d];
\tprivate static Scanner in = new Scanner(System.in);

\tpublic static void main(String[] args) {

~d

\t}
}
" num-cells body))


(defmulti ir->code (fn [ir] (:op ir)))

(defmethod ir->code :default
  [ir]
  (throw (ex-info "Unknown IR found " {:ir ir})))

;;;; Basic IR

(defmethod ir->code :add
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr]++;" "\n")))

(defmethod ir->code :sub
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr]--;" "\n")))

(defmethod ir->code :right
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr++;" "\n")))

(defmethod ir->code :left
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr--;" "\n")))

(defmethod ir->code :output
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "System.out.print((char) cells[ptr]);" "\n")))

(defmethod ir->code :input
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] = (byte) in.next().charAt(0);" "\n")))

(defmethod ir->code :loop
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "while(cells[ptr] != 0) {" "\n"
         indent (apply str (str/join indent (map ir->code (:children ir))))
         indent "}" "\n")))

;;;; Extended IR (for optimize)

(defmethod ir->code :set-cell-value
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] += " (:val ir) ";\n")))

(defmethod ir->code :set-cell-pointer
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr += " (:val ir) ";\n")))

(defmethod ir->code :clear
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] = 0;" "\n")))