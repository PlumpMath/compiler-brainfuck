(ns coldnew.compiler.brainfuck.backend.java
  (:require [clojure.pprint :refer [cl-format]]
            [clojure.string :as str]
            [coldnew.compiler.brainfuck.utils :refer [line-indent]]))

(declare generate-runtime ir->code)

(defn ir->java
  ([ir] (ir->java ir 3000))
  ([ir num-cells]
   (generate-runtime num-cells (apply str (map ir->code ir)))))

(defn generate-runtime
  [num-cells body]
  (cl-format nil "// This file is generated by coldnew's brainfuck compiler
// You can use following command to compile it:
//
//    javac  BrainFuck.java
//
// Then lt's execute it:
//
//    java BrainFuck
//

import java.util.Scanner;

public class BrainFuck {

\tprivate static int ptr;
\tprivate static byte[] cells = new byte[~d];
\tprivate static Scanner in = new Scanner(System.in);

\tpublic static void main(String[] args) {

~d

\t}
}
" num-cells body))


(defmulti ir->code (fn [ir] (:op ir)))

(defmethod ir->code :default
  [ir]
  (throw (ex-info "Unknown IR found " {:ir ir})))

;;;; Basic IR

(defmethod ir->code :add
  [ir]
  (line-indent ir "cells[ptr]++;"))

(defmethod ir->code :sub
  [ir]
  (line-indent ir "cells[ptr]--;"))

(defmethod ir->code :right
  [ir]
  (line-indent ir "ptr++;"))

(defmethod ir->code :left
  [ir]
  (line-indent ir "ptr--;"))

(defmethod ir->code :output
  [ir]
  (line-indent ir "System.out.print((char) cells[ptr]);"))

(defmethod ir->code :input
  [ir]
  (line-indent ir "cells[ptr] = (byte) in.next().charAt(0);"))

(defmethod ir->code :loop
  [ir]
  (str (line-indent ir "while(cells[ptr] != 0) {")
       (str/join "" (map ir->code (:children ir)))
       (line-indent ir "}")))

;;;; Extended IR (for optimize)

(defmethod ir->code :set-cell-value
  [ir]
  (line-indent ir "cells[ptr] += " (:val ir) ";"))

(defmethod ir->code :set-cell-pointer
  [ir]
  (line-indent ir "ptr += " (:val ir) ";"))

(defmethod ir->code :clear
  [ir]
  (line-indent ir "cells[ptr] = 0;"))