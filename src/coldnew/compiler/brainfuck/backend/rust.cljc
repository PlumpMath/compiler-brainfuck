(ns coldnew.compiler.brainfuck.backend.rust
  (:require [clojure.pprint :refer [cl-format]]
            [clojure.string :as str]))

(declare generate-runtime ir->code)

(defn ir->rust
  ([ir] (ir->rust ir 3000))
  ([ir num-cells]
   (generate-runtime num-cells (apply str (map ir->code ir)))))

(defn generate-runtime
  [num-cells body]
  (cl-format nil "// This file is generated by coldnew's brainfuck compiler
// You can use following command to compile it:
//
//    rustc xxx.rs -o xxx
//

#[allow(unused_imports)]
use std::io::Read;
#[allow(unused_imports)]
use std::io::stdin;

fn main() {
\tlet mut cells :Vec<u32> = vec![0; ~d];
\tlet mut ptr :usize = 0;

~d

}
" num-cells body))

(defmulti ir->code (fn [ir] (:op ir)))

(defmethod ir->code :default
  [ir]
  (throw (ex-info "Unknown IR found " {:ir ir})))

;;;; Basic IR

(defmethod ir->code :add
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] += 1;" "\n")))

(defmethod ir->code :sub
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] -= 1;" "\n")))

(defmethod ir->code :right
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr += 1;" "\n")))

(defmethod ir->code :left
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr -= 1;" "\n")))

(defmethod ir->code :output
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "print!(\"{}\", cells[ptr] as u8 as char);" "\n")))

(defmethod ir->code :input
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "let mut buf :Vec<u8> = vec![0];" "\n"
         indent "stdin().read(&mut buf).ok().expect(\"Failed to read from stdin.\");" "\n"
         indent "cells[ptr] = buf[0];" "\n")))

(defmethod ir->code :loop
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "while cells[ptr] != 0 {" "\n"
         indent (apply str (str/join indent (map ir->code (:children ir))))
         indent "}" "\n")))

;;;; Extended IR (for optimize)

(defmethod ir->code :set-cell-value
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr]" (if (< (:val ir) 0)
                               (str " -= " (- (:val ir)))
                               (str " += " (:val ir)))
         ";\n")))

(defmethod ir->code :set-cell-pointer
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "ptr" (if (< (:val ir) 0)
                        (str " -= " (- (:val ir)))
                        (str " += " (:val ir)))
         ";\n")))

(defmethod ir->code :clear
  [ir]
  (let [indent (apply str (repeat (:indent-depth ir) "\t"))]
    (str indent "cells[ptr] = 0;" "\n")))